import java.util.ArrayList;
import java.util.Scanner;
public class HouseApp {

	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);
		double p;
		House h = new House();
		int feature_action;
		HouseInventory a = new HouseInventory();
		do {
			feature_action= feature_choice_meth( input);
			switch(feature_action) {
			
			case 1:
				//add
				System.out.println("Enter House ID- ");
				int id= input.nextInt();
				System.out.println("Enter House Price- ");
				double price= input.nextDouble();
				System.out.println("Enter House Availability Status- (true or false) ");
				boolean stat= input.nextBoolean();
				
				h.setID(id);
				h.setPrice(price);
				h.setStatus(stat);
				a.Add(h);
				System.out.println("Added!");
				break;
				
			case 2:
				//edit
				System.out.println("Enter the ID of the house you want to edit- ");
				int id_e= input.nextInt();
				System.out.println("Enter House New Price- ");
				double price_e= input.nextDouble();
				a.Edit(id_e, price_e);
				System.out.println("Edited!");
				break;
				
			case 3:
				//delete;
				System.out.println("Enter House ID- ");
				int id_del= input.nextInt();
				int result_del=a.Delete(id_del);
				System.out.println(result_del);
				System.out.println("Deleted!");
				break;
				
			case 4:
				//display
				System.out.print("Enter price below which you want the data from -> ");
				p = input.nextDouble();
				//create an array and store the result and print using that 
				a.HousesBellowPrice(p);
				//print the array
				
				for(int i =0; i<a.HousesBellowPrice(p).length; i++) {
					System.out.println(i);
					a.HousesBellowPrice(p)[i].print_house();
				}//for
				break;
			
	
			case 5:
				//exit
				System.out.println("Exiting. Thank you for visiting.");
				break;
			}
			
		}while(feature_action!=5);
		
		
	}
	
	//methods
	//Choice for actions 
	public static int feature_choice_meth(Scanner input) {
		System.out.println("1. Add a House");
		System.out.println("2. Edit a House");
		System.out.println("3. Delete a House");
		System.out.println("4. Display all the houses below a certain price ");
		System.out.println("5. Exit ");
		int user_feature_choice= input.nextInt();
		return user_feature_choice;
	}//actions
}

// ------------------------------------------------------------------------------------------------------------------------------

//HOUSE OBJECT 
//House class 
public class House {
	//data fields
	private int ID;
	private double Price;
	private boolean status; //True means available and False means not available for sale
	
	//constructor 
	public House() {		
	}

	public House(int id, double p, boolean st) {
		this.ID = id;
		this.Price= p;
		this.status= st;
	}

	//getter and setters and methods 
	public int getID() {
		return ID;
	}

	public void setID(int iD) {
		ID = iD;
	}

	public double getPrice() {
		return Price;
	}

	public void setPrice(double price) {
		Price = price;
	}

	public boolean getStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}
	
	//print details of the house
	public void print_house() {
		System.out.println("Id is "+ ID + "; Price is "+ Price + "; Available for sale? "+ status);
	}
		
}
// ------------------------------------------------------------------------------------------------------------------------------

//HOUSE INTERFACE

public interface InventoryMng {
	public void Add(House h);
	public void Edit(int id, double price); //allow the user to update the price and whether the house is available for sell or not.
	public int Delete (int id);
	//delete a house whose ID’ value is id – returns zero if the house was not deleted (not found) // return 1 is the house was deleted.
	public House[] HousesBellowPrice(double p);
	//returns an array of houses that are below a price p.
	//in case there are none – then you need to return an empty array.
	//once this method called in the main, you will need to print the array being return by the method to the screen.
	public int findMin( );
	//this method will return the ID of the minimum of the house.
	//once this method is being called in the main you will need to print the ID of being returned from this method
}

// ------------------------------------------------------------------------------------------------------------------------------

import java.util.ArrayList;
import java.util.Scanner;

public class HouseInventory implements InventoryMng{
	ArrayList<House> houselist = new ArrayList<>();
	
	
	//add house to the list 
	
	public void Add(House h) {
		houselist.add(h);
		
	}
	
	//edit a house in the list 
	
	public void Edit(int id_e, double price_e) {
		Scanner input= new Scanner(System.in);
		
		System.out.println("Enter House New Availability Status- ");
		boolean stat_e= input.nextBoolean();
		
		for (int i=0; i<houselist.size(); i++) {
			if (houselist.get(i).getID()==id_e) {
				houselist.get(i).setPrice(price_e);
				houselist.get(i).setStatus(stat_e);
			}//if
		}//for
	}

	public int Delete(int id_del) {
		for (int i=0; i<houselist.size(); i++) {
			if (houselist.get(i).getID()==id_del) {
				houselist.remove(i);
				return 1; //signifying deleted 
			}//if
		}//for
		return 0;
	}

	public House[] HousesBellowPrice(double p) {
		
		//identify the size of the new array 
		int size_array=0;
		for (int i=0; i<houselist.size(); i++) {
			if (houselist.get(i).getPrice() <p) {
				size_array++;

			}//if
		}//for
	
		House [] hbp = new House [size_array];
		//initialize array 
		for (int k =0; k<size_array; k++) {
			hbp[k]= new House();
		}
		//array of houses 
		
		//counter for hbp
		int c=0; 
		for (int i=0; i<houselist.size(); i++) {
			if (houselist.get(i).getPrice() <p) {
				//add to the hbp array 
				hbp[c].setID(houselist.get(i).getID());	
				hbp[c].setPrice(houselist.get(i).getPrice());
				hbp[c].setStatus(houselist.get(i).getStatus());
				//add to counter if an object is added to the array
				c++;
			}//if
		}//for
		
		return hbp;
	}

	public int findMin() {
		double min=houselist.get(0).getPrice();
		int id_m=houselist.get(0).getID();
		int i_m;
		for (int i=0; i<houselist.size(); i++) {
			if (houselist.get(i).getPrice() <min) {
				//add to the hbp array 
				min = houselist.get(i).getPrice();
				id_m= houselist.get(i).getID();
				i_m=i;
				//add to counter if an object is added to the array
			}//if
		}//for 
		
		return id_m;
	}
	
}
//overall assumption is that the elements in the ArrayList have unique IDs. 


